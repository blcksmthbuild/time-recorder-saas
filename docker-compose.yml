version: "3.8"

services:
  # ----------------------------------------------------
  # 1. CORE SHELL (Host Frontend)
  # ----------------------------------------------------
  core-shell:
    environment:
      VITE_TIMELOG_ENTRY: http://localhost:8082/dist/assets/remoteEntry.js
      VITE_AI_AGENT_ENTRY: http://localhost:8083/dist/assets/remoteEntry.js
    build:
      context: ./frontend-core
      dockerfile: Dockerfile
      # √Åtadjuk a Fastify URL-t a build id≈ëben
      args:
        VITE_FASTIFY_API_URL: http://localhost:3000/api/v1
    container_name: core-shell
    ports:
      - "80:80" # Hozz√°f√©r√©s a Core Shell-hez a http://localhost:80 c√≠men
    depends_on:
      - fastify-backend
      - timelog-plugin
      - ai-agent-plugin

  # ----------------------------------------------------
  # 2. TIMELOG PLUGIN (Remote Frontend / Micro Frontend)
  # ----------------------------------------------------
  timelog-plugin:
    build:
      context: ./timelog-plugin
      dockerfile: Dockerfile
    container_name: timelog-plugin
    # Ezen a bels≈ë h√°l√≥zati porton fut a NGINX, √©s ezen a c√≠men √©ri el a Core Shell
    expose:
      - "80"
    ports:
      - "8082:80"
    # Fontos: A Vite configban be√°ll√≠tott 8081-es portot most az NGINX 80-as portj√°ra k√©pezt√ºk le!
    # A Core Shell Vite configj√°ban l√©v≈ë URL-t friss√≠tened kell erre a bels≈ë h√°l√≥zati n√©vre:
    # timelog_plugin_app: 'timelog_plugin_app@http://timelog-plugin/assets/remoteEntry.js'
    # Ezt a l√©p√©st k√©zzel kell elv√©gezned a frontend-core/vite.config.ts-ben!

  # ----------------------------------------------------
  # 3. FASTIFY BACKEND (TimeLog/Auth API)
  # ----------------------------------------------------
  fastify-backend:
    build:
      context: ./time-log-backend # Felt√©telezett el√©r√©si √∫t
      dockerfile: Dockerfile
    container_name: fastify-backend
    ports:
      - "3000:3000" # Hozz√°f√©r√©s a Fastify API-hoz a http://localhost:3000 c√≠men
    environment:
      # Fontos: A Fastify bels≈ë DB-c√≠me a szolg√°ltat√°sn√©v lesz
      AI_AGENT_HOST: ai-agent-service
      DATABASE_URL: postgresql://user:password@db:5432/timelogdb
      NODE_ENV: production
      JWT_SECRET: "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.owv7q9nVbW5tqUezF_G2nHTra-ANW3HqW9epyVwh08Y-Z-FKsnG8eBIpC4GTfTVU"
    command: sh -c "npx prisma migrate deploy && npm start"
    depends_on:
      - db
      - ai-agent-service

  # ----------------------------------------------------
  # 4. POSTGRESQL DATABASE
  # ----------------------------------------------------
  db:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: timelogdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

# ----------------------------------------------------
# 5. AI-AGENT SERVICE (Python Logic)
# ----------------------------------------------------
ai-agent-service:
  build:
    context: ./ai-agent-service # Path to your Python code (main.py)
    dockerfile: Dockerfile
  container_name: ai-agent-service
  # üí° CRITICAL: Expose the port used in your Node.js code (4000)
  expose:
    - "4000"
  environment:
    # üí° CRITICAL: Set the PORT env variable for uvicorn run
    PORT: 4000

    MONDAY_API_KEY: eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjU2OTQ1NDE3MSwiYWFpIjoxMSwidWlkIjo5MDAzNzY2OCwiaWFkIjoiMjAyNS0xMC0wMlQxNjo0MTozMC43MzJaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MzE3MzkzNDgsInJnbiI6ImV1YzEifQ.Fm2TizWJuMjuuHesaC8FoK-e3MJUp0UvkIvZrNW7Dso
    MONDAY_PROJECT_BOARD_ID: 5024970082
    FASTIFY_API_URL: http://fastify-backend:3000/api/v1
  # This container needs Fastify and the DB to be running if it calls them on startup
  depends_on:
    - fastify-backend
    - db

  # ----------------------------------------------------
  # 6. AI-AGENT PLUGIN (Remote Frontend / Micro Frontend)
  # ----------------------------------------------------
  ai-agent-plugin:
    build:
      context: ./ai-agent-plugin
      dockerfile: Dockerfile
    container_name: ai-agent-plugin
    expose:
      - "80"
    ports:
      - "8083:80"
