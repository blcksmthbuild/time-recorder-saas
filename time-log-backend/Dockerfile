# -----------------------------------------------------------------------
# 1. BUILD STAGE: F√ºgg≈ës√©gek telep√≠t√©se √©s a TypeScript/K√≥d buildel√©se
# -----------------------------------------------------------------------
FROM node:20-alpine AS builder

WORKDIR /app

# M√°soljuk a csomagf√°jlokat √©s telep√≠ts√ºk a f√ºgg≈ës√©geket
# Ezt k√ºl√∂n m√°soljuk, hogy kihaszn√°ljuk a Docker cache-t
COPY package*.json ./
RUN npm install

# M√°soljuk a teljes forr√°sk√≥dot
COPY . .

RUN npx prisma generate

# Futtassuk a build parancsot (pl. tsc, vite build, stb.)
# üí° K√©rj√ºk, gy≈ëz≈ëdj meg r√≥la, hogy az "npm run build" l√©tezik a package.json-ban,
#    √©s a v√©g√©n az app k√≥dja a /dist mapp√°ba ker√ºl!
RUN npm run build 


# -----------------------------------------------------------------------
# 2. PRODUCTION STAGE: A futtat√≥ k√∂rnyezet (kisebb √©s biztons√°gosabb)
# -----------------------------------------------------------------------
FROM node:20-alpine

WORKDIR /app

# M√°soljuk a package.json √©s a production f√ºgg≈ës√©geket a builder stage-b≈ël
COPY package*.json ./
# üí° CSAK a production f√ºgg≈ës√©geket telep√≠tj√ºk
RUN npm install --production

COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma /app/node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma/client /app/node_modules/@prisma/client

COPY --from=builder /app/dist ./dist 

EXPOSE 3000

CMD ["node", "dist/server.js"] 
# üí° Fontos: Friss√≠tsd ezt a parancsot a val√≥s ind√≠t√≥ f√°jlnevedre!
#    Ha a package.json-ban van egy "start" script, ami a production k√≥dot ind√≠tja, akkor:
# CMD ["npm", "start"]